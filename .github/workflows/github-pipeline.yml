name: Nuget Publish CI
on:
  push:
  pull_request:
    branches: [ "master" ]      
env:
  # Stop wasting time caching packages
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending usage data to Microsoft
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  # Project name to pack and publish
  PROJECT_NAME: Aqovia.PactProducerVerifier  
  # Official NuGet Feed settings
  NUGET_FEED: https://api.nuget.org/v3/index.json
  NUGET_KEY: ${{ secrets.NUGET_ORG_PUBLISH_API_KEY  }}
  LATEST_BUILD_NUMBER: 1.1.${{ github.run_number }}
jobs:
  build:
    runs-on: windows-2019
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Nuget.exe
        uses: nuget/setup-nuget@v2
      - name: Restore
        run: dotnet restore
      - name: Restore Packages
        run: nuget restore $PROJECT_NAME.sln
      - name: Build
        run: dotnet build ${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj -c Release --no-restore -p:GeneratePackageOnBuild=true -p:IncludeSource=true -p:IncludeSymbols=true -p:NuspecFile=${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.nuspec
      - name: Test
        run: 'dotnet test -c Release --no-restore'      
      - name: Pack
        run: nuget pack "${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.nuspec" -Version "${{ env.LATEST_BUILD_NUMBER }}" -OutputDirectory "./${{ env.PROJECT_NAME }}/bin/Release" -Symbols
        env:
          last_tagged_version: 1.1.${{ github.run_attempt }}
      #- name: Upload Artifact
      #  uses: actions/upload-artifact@v2
      #  with:
      #    name: nupkg
      #    path: ./${{ env.PROJECT_NAME }}/bin/Release/*.nupkg
      - name: Push to NuGet Feed
        if: success() && env.LATEST_BUILD_NUMBER
        run: dotnet nuget push ${{ env.PROJECT_NAME }}\bin\Release\*.nupkg -s ${{ env.NUGET_FEED }} --skip-duplicate -k ${{ env.NUGET_KEY }}  
  deploy:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: windows-2019
    steps:      
      - name: Push to NuGet Feed
        if: success() && env.LATEST_BUILD_NUMBER
        run: dotnet nuget push ${{ env.PROJECT_NAME }}\bin\Release\*.nupkg -s ${{ env.NUGET_FEED }} --skip-duplicate -k ${{ env.NUGET_KEY }}  
