name: Nuget Publish CI
on:
  push:
  pull_request:
    branches: [ "master" ]      
env:
  # Stop wasting time caching packages
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending usage data to Microsoft
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  # Project name to pack and publish
  PROJECT_NAME: Aqovia.PactProducerVerifier
  # GitHub Packages Feed settings
  #GITHUB_FEED: https://pkgs.dev.azure.com/aqovia-opensource/4feb2f54-ea14-4724-966c-b30048d22334/_packaging/NuGetOSS/nuget/v3/index.json
  #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Official NuGet Feed settings
  NUGET_FEED: https://api.nuget.org/v3/index.json
  NUGET_KEY: 8nOJ8wjmitnOcDwlirh5QLHECezb9AQgSzbXbBsNkOBGhtOxz1WDQKBDOZXIhoM9
jobs:
  build:
    runs-on: windows-2019
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Restore
        run: dotnet restore
      - name: Restore Packages
        run: nuget restore $PROJECT_NAME.sln
      - name: Build
        run: dotnet build -c Release --no-restore
      - name: Test
        run: 'dotnet test -c Release --no-restore'
      #- name: Extract Build Variables
      #  id: build-vars
      #  uses: ./.github/actions/set-build-variables
      - name: Pack
        run: dotnet pack -v normal -c Release --no-restore -p:Version=${last_tagged_version} ${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj
        env:
          last_tagged_version: 1.1.${{ github.run_attempt }}
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: nupkg
          path: ./src/${{ env.PROJECT_NAME }}/bin/Release/*.nupkg
  #branch_preview:
  #  needs: build
  #  if: github.event_name == 'push' && github.ref != 'refs/heads/master'
  #  runs-on: windows-2019
  #  steps:
  #    - name: Download Artifact
  #      uses: actions/download-artifact@v1
  #      with:
  #        name: nupkg
      #- name: Push to GitHub Feed
      #  run: dotnet nuget push ./nupkg/*.nupkg --source ${{ env.GITHUB_FEED }} --api-key ${GITHUB_TOKEN}
  deploy:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: windows-2019
    steps:
      #- name: Checkout
      #  uses: actions/checkout@v3
      #  with:
      #    fetch-depth: 0
      #- name: Extract pull request details
      #  id: pr
      #  uses: 8BitJonny/gh-get-current-pr@1.2.0        
      #  with:
      #    github-token: ${{ secrets.GITHUB_TOKEN }}
      #    sha: ${{ github.sha }}
      #    filterOutClosed: false
      #    new-version: 1.0.${{ steps.pr.outputs.number }}
      #- name: Extract Build Variables
      #  id: build-vars
      #  uses: ./.github/actions/set-build-variables
      #- name: Prepare Release
      #  id: prepare-release
      #  if: success() && steps.pr.outputs.number
      #  uses: ./.github/actions/set-build-variables
      #  with:
      #    last-tagged-version: ${{ steps.build-vars.outputs.last-tagged-version }}
      #    pr-title: ${{ steps.pr.outputs.pr_title }}
      #    pr-body: ${{ steps.pr.outputs.pr_body }}
          
      #- name: Create a GitHub Release
      #  id: create_release
      #  if: success() && steps.prepare-release.outputs.tag-name 
      #  uses: actions/create-release@v1
      #  with:
      #    tag_name: ${{ steps.prepare-release.outputs.tag-name }}
      #    release_name: ${{ steps.prepare-release.outputs.new-version }}
      #    body_path: /tmp/note.md
      #    prerelease: false
      - name: Create Release NuGet package
        if: success() && steps.pr.outputs.new-version
        run: dotnet pack -v normal -c Release -p:Version=${new_version} -o nupkg ${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj
        env:
          new_version: 1.1.${{ github.run_attempt }}
      #- name: Push to GitHub Feed
      #  if: success()
      #  run: dotnet nuget push ./nupkg/*.nupkg --source ${{ env.GITHUB_FEED }} --api-key ${GITHUB_TOKEN}
      - name: Push to NuGet Feed
        if: success() && env.NEW_VERSION
        run: dotnet nuget push ./nupkg/*.nupkg --source $NUGET_FEED --skip-duplicate --api-key $NUGET_KEY
